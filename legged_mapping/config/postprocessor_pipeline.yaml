# TODO (AZ): Look into how to process/filter data and add layers
postprocessor_pipeline: # set by postprocessor_pipeline_name
  - name: bufferNormalizer
    type: gridMapFilters/BufferNormalizerFilter

  # # Fill holes in the map with inpainting.
  # - name: inpaint
  #   type: gridMapCv/InpaintFilter
  #   params:
  #     input_layer: elevation
  #     output_layer: elevation_inpainted
  #     radius: 0.1
  
  # Median filter
  - name: median
    type: gridMapFilters/MedianFillFilter
    params:
      input_layer: elevation
      output_layer: elevation_inpainted # Original name: median_filter
      fill_hole_radius: 0.1 # in m
      filter_existing_values: false # Default is false. If enabled it also does a median computation for existing values
      existing_value_radius: 0.2 # Note that this option only has an effect if filter_existing_values is true
      fill_mask_layer: fill_mask # A layer that is used to compute which areas to fill. If not present, it is automatically computed.
      debug: false # If enabled, the additional debug_infill_mask_layer is published
      debug_infill_mask_layer: infill_mask # Layer used to visualize the intermediate, spare-outlier removed fill mask. Only published if debug is enabled.
  
  
  #  Delete layers that are not needed to reduce bandwidth
  - name: delete_original_layers
    type: gridMapFilters/DeletionFilter
    params:
      layers: [lowest_scan_point,sensor_x_at_lowest_scan, sensor_y_at_lowest_scan, sensor_z_at_lowest_scan] # List of layers.

  # Reduce noise with a radial blurring filter
  - name: mean_in_radius
    type: gridMapFilters/MeanInRadiusFilter
    params:
      input_layer: elevation_inpainted
      output_layer: elevation_smooth
      radius: 0.11

  # Compute Surface normals
  - name: surface_normals
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation_inpainted
      output_layers_prefix: normal_vectors_
      radius: 0.1
      normal_vector_positive_axis: z

  # Compute slope from surface normal
  - name: slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope
      expression: acos(normal_vectors_z)

  # Compute roughness as absolute difference from map to smoothened map
  - name: roughness
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: roughness
      expression: abs(elevation_inpainted - elevation_smooth)

  # Edge detection by computing the standard deviation from slope
  - name: edge_detection # TODO: Figure out edge detection later
    type: gridMapFilters/SlidingWindowMathExpressionFilter
    params:
      input_layer: slope
      output_layer: edges
      expression: sqrt(sumOfFinites(square(slope - meanOfFinites(slope))) ./ numberOfFinites(slope)) # Standard deviation
      compute_empty_cells: false
      edge_handling: crop # Options: inside, crop, empty, mean
      window_length: 0.05
  # # Edge detection on elevation layer with convolution filter as alternative to filter above.
  # - name: edge_detection
  #   type: gridMapFilters/SlidingWindowMathExpressionFilter
  #   params:
  #     input_layer: elevation_inpainted
  #     output_layer: edges
  #     expression: 'sumOfFinites([0,1,0;1,-4,1;0,1,0].*elevation_inpainted)' # Edge detection.
  #     # expression: 'sumOfFinites([0,-1,0;-1,5,-1;0,-1,0].*elevation_inpainted)' # Sharpen.
  #     compute_empty_cells: false
  #     edge_handling: mean # options: inside, crop, empty, mean
  #     window_size: 3 # Make sure to make this compatible with the kernel matrix.


  # Compute traversability as normalized weighted sum of slope and roughness.
  - name: traversability
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability
      expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1))


#  Delete layers that are not needed to reduce bandwidth
  - name: delete_original_layers_2
    type: gridMapFilters/DeletionFilter
    params:
      layers: [color] # List of layers.