<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget name="Main Window" parent="main_window">
  <Tab tab_name="Position" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
     <DockSplitter sizes="0.5;0.5" count="2" orientation="|">
      <DockArea name="Observed Position">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.070421" right="70.328000" left="65.328000" top="0.728541"/>
        <limitY/>
        <curve color="#ff7f0e" name="Observed x"/>
        <curve color="#f14cc1" name="Observed y"/>
        <curve color="#9467bd" name="Observed z"/>
       </plot>
      </DockArea>
      <DockArea name="Ground Truth Position">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.091058" right="70.328000" left="65.328000" top="0.610678"/>
        <limitY/>
        <curve color="#ff7f0e" name="/ground_truth/state/pose/pose/position/x"/>
        <curve color="#f14cc1" name="/ground_truth/state/pose/pose/position/y"/>
        <curve color="#9467bd" name="/ground_truth/state/pose/pose/position/z"/>
       </plot>
      </DockArea>
     </DockSplitter>
     <DockArea name="Positional Error">
      <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
       <range bottom="-0.026830" right="70.328000" left="65.328000" top="0.122305"/>
       <limitY/>
       <curve color="#d62728" name="Error Position x"/>
       <curve color="#1ac938" name="Error Position y"/>
       <curve color="#ff7f0e" name="Error position z"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="Spatial Position" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
     <DockArea name="Transverse Plane">
      <plot flip_x="false" style="Lines" flip_y="false" mode="XYPlot">
       <range bottom="-0.051601" right="0.725658" left="0.689668" top="-0.043088"/>
       <limitY/>
       <curve color="#ff7f0e" curve_x="Observed x" curve_y="Observed y" name="Observed [x;y]"/>
      </plot>
     </DockArea>
     <DockSplitter sizes="0.5;0.5" count="2" orientation="|">
      <DockArea name="Saggital Plane">
       <plot flip_x="false" style="Lines" flip_y="false" mode="XYPlot">
        <range bottom="0.306456" right="0.712799" left="0.702528" top="0.311542"/>
        <limitY/>
        <curve color="#f14cc1" curve_x="Observed x" curve_y="Observed z" name="Observed [x;z]"/>
       </plot>
      </DockArea>
      <DockArea name="Coronal Plane">
       <plot flip_x="false" style="Lines" flip_y="false" mode="XYPlot">
        <range bottom="0.306456" right="-0.042209" left="-0.052480" top="0.311542"/>
        <limitY/>
        <curve color="#9467bd" curve_x="Observed y" curve_y="Observed z" name="Observed [y;z]"/>
       </plot>
      </DockArea>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="Body" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
     <DockSplitter sizes="0.5;0.5" count="2" orientation="|">
      <DockArea name="Observed Velocity (x,y,z)">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.046426" right="70.328000" left="65.328000" top="0.159990"/>
        <limitY/>
        <curve color="#9467bd" name="/legged_robot_mpc_observation/state/value.0"/>
        <curve color="#17becf" name="/legged_robot_mpc_observation/state/value.1"/>
        <curve color="#bcbd22" name="/legged_robot_mpc_observation/state/value.2"/>
       </plot>
      </DockArea>
      <DockArea name="Observed Angular Velocity (y,p,r)">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.010386" right="70.328000" left="65.328000" top="0.011033"/>
        <limitY/>
        <curve color="#1f77b4" name="/legged_robot_mpc_observation/state/value.3"/>
        <curve color="#d62728" name="/legged_robot_mpc_observation/state/value.4"/>
        <curve color="#1ac938" name="/legged_robot_mpc_observation/state/value.5"/>
       </plot>
      </DockArea>
     </DockSplitter>
     <DockSplitter sizes="0.5;0.5" count="2" orientation="|">
      <DockArea name="Observed Position (x,y,z)">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.070421" right="70.328000" left="65.328000" top="0.728541"/>
        <limitY/>
        <curve color="#ff7f0e" name="/legged_robot_mpc_observation/state/value.6"/>
        <curve color="#f14cc1" name="/legged_robot_mpc_observation/state/value.7"/>
        <curve color="#9467bd" name="/legged_robot_mpc_observation/state/value.8"/>
       </plot>
      </DockArea>
      <DockArea name="Observed Angular Position (y,p,r)">
       <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
        <range bottom="-0.014069" right="70.328000" left="65.328000" top="0.202538"/>
        <limitY/>
        <curve color="#17becf" name="/legged_robot_mpc_observation/state/value.10"/>
        <curve color="#bcbd22" name="/legged_robot_mpc_observation/state/value.11"/>
        <curve color="#1f77b4" name="/legged_robot_mpc_observation/state/value.9"/>
       </plot>
      </DockArea>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="Control" containers="1">
   <Container>
    <DockSplitter sizes="1" count="1" orientation="-">
     <DockSplitter sizes="0.5;0.5" count="2" orientation="|">
      <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
       <DockArea name="Left Front Feet Contact Forces">
        <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
         <range bottom="-5.641898" right="70.328000" left="65.328000" top="69.969280"/>
         <limitY/>
         <curve color="#ff7f0e" name="/legged_robot_mpc_observation/input/value.0"/>
         <curve color="#f14cc1" name="/legged_robot_mpc_observation/input/value.1"/>
         <curve color="#9467bd" name="/legged_robot_mpc_observation/input/value.2"/>
        </plot>
       </DockArea>
       <DockArea name="Left Hind Feet Contact Forces">
        <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
         <range bottom="-5.741310" right="70.328000" left="65.328000" top="83.083841"/>
         <limitY/>
         <curve color="#d62728" name="/legged_robot_mpc_observation/input/value.6"/>
         <curve color="#1ac938" name="/legged_robot_mpc_observation/input/value.7"/>
         <curve color="#ff7f0e" name="/legged_robot_mpc_observation/input/value.8"/>
        </plot>
       </DockArea>
      </DockSplitter>
      <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
       <DockArea name="Right Front Feet Contact Forces">
        <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
         <range bottom="-9.017900" right="70.328000" left="65.328000" top="69.470142"/>
         <limitY/>
         <curve color="#17becf" name="/legged_robot_mpc_observation/input/value.3"/>
         <curve color="#bcbd22" name="/legged_robot_mpc_observation/input/value.4"/>
         <curve color="#1f77b4" name="/legged_robot_mpc_observation/input/value.5"/>
        </plot>
       </DockArea>
       <DockArea name="Right Hind Feet Contact Forces">
        <plot flip_x="false" style="Lines" flip_y="false" mode="TimeSeries">
         <range bottom="-4.260480" right="70.328000" left="65.328000" top="83.671851"/>
         <limitY/>
         <curve color="#f14cc1" name="/legged_robot_mpc_observation/input/value.10"/>
         <curve color="#9467bd" name="/legged_robot_mpc_observation/input/value.11"/>
         <curve color="#17becf" name="/legged_robot_mpc_observation/input/value.9"/>
        </plot>
       </DockArea>
      </DockSplitter>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="3"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default time_axis="" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="ROS Topic Subscriber">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS /rosout Visualization"/>
  <plugin ID="ROS Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles/>
 <previouslyLoaded_Streamer name="ROS Topic Subscriber"/>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations>
  <snippet name="Error position z">
   <global></global>
   <function>-- Error z position (z_hat - z_true)
return value - v1</function>
   <linked_source>/ground_truth/state/pose/pose/position/z</linked_source>
   <additional_sources>
    <v1>/legged_robot_mpc_observation/state/value.8</v1>
   </additional_sources>
  </snippet>
  <snippet name="Error Position y">
   <global></global>
   <function>-- Error y position (y_hat - y_true)
return value - v1</function>
   <linked_source>/ground_truth/state/pose/pose/position/y</linked_source>
   <additional_sources>
    <v1>/legged_robot_mpc_observation/state/value.7</v1>
   </additional_sources>
  </snippet>
  <snippet name="Error Position x">
   <global></global>
   <function>-- Error x position (x_hat - x_true)
return value - v1</function>
   <linked_source>/legged_robot_mpc_observation/state/value.6</linked_source>
   <additional_sources>
    <v1>/ground_truth/state/pose/pose/position/x</v1>
   </additional_sources>
  </snippet>
  <snippet name="Observed z">
   <global></global>
   <function>return value</function>
   <linked_source>/legged_robot_mpc_observation/state/value.8</linked_source>
  </snippet>
  <snippet name="Observed y">
   <global></global>
   <function>return value</function>
   <linked_source>/legged_robot_mpc_observation/state/value.7</linked_source>
  </snippet>
  <snippet name="Observed x">
   <global></global>
   <function>return value</function>
   <linked_source>/legged_robot_mpc_observation/state/value.6</linked_source>
  </snippet>
 </customMathEquations>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

